package codelens.backend.Messages.service;

import codelens.backend.DocxFile.service.DocxService;
import codelens.backend.Messages.entity.Message;
import codelens.backend.Messages.repository.MessageRepository;
import codelens.backend.Session.repository.SessionRepository;
import codelens.backend.User.UserRepository;
import lombok.RequiredArgsConstructor;
import org.bson.types.ObjectId;
import org.springframework.stereotype.Service;
import java.io.IOException;
import java.time.Instant;
import java.util.List;
import java.util.Optional;


@Service
@RequiredArgsConstructor
public class MessageServiceImpl implements MessageService {

    private final MessageRepository messageRepository;
    private final UserRepository userRepository;
    private final SessionRepository sessionRepository;
    private final DocxService docxService;

    /**
     * Creates a new message, saves it to the database, and generates a DOCX file.
     *
     * @param userID The ID of the user sending the message.
     * @param sessionId The session ID in which the message was sent.
     * @param userMessage The content of the user's message.
     * @param IsAIGenerated Flag to indicate if the message was generated by AI.
     * @return The created Message object.
     * @throws IOException If there is an error while generating the DOCX file.
     */
    @Override
    public Message createMessage(String userID, String sessionId, String userMessage, boolean IsAIGenerated) throws IOException {

        userRepository.findById(new ObjectId(userID)).orElseThrow(() -> new Error("User Not Found"));
        sessionRepository.findById(new ObjectId(sessionId)).orElseThrow(() -> new Error("Session Not Found"));
        Message message = Message.builder()
                .userId(userID)
                .message(userMessage)
                .sessionId(sessionId)
                .isAIGenerated(IsAIGenerated)
                .createdAt(Instant.now())
                .build();

        messageRepository.save(message);
        docxService.generateDocx(message);

        return message;
    }

    /**
     * Retrieves a message by its ID.
     *
     * @param id The ID of the message to retrieve.
     * @return An Optional containing the found message, or an empty Optional if not found.
     */

    @Override
    public Optional<Message> getMessageById(ObjectId id) {
        return Optional.empty();
    }


    /**
     * Retrieves a list of messages by user ID and session ID, ordered by creation time.
     *
     * @param userId The ID of the user whose messages are being retrieved.
     * @param sessionId The session ID in which the messages were sent.
     * @return A list of messages from the specified user and session.
     */
    @Override
    public List<Message> getMessageByUserIdAndSessionId(String userId, String sessionId) {
        return messageRepository.getMessagesByUserIdAndSessionIdOrderByCreatedAt(userId, sessionId);
    }
}
